package com.company.java015;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

//1. 콜렉션프레임워크 - [배열]의 단점을 개선한 [객체]만 저장가능 (동적배열)
//2. List, Set, Map
//	 List - index O, 중복허용 O, add/get(번호)/size/remove/contains
//	 Set  - index X, 중복허용 X, add/향상for, Iterator/size/remove/contains

public class Colletion003_Set {
	public static void main(String[] args) {
		List<String> list = new ArrayList<>();
		list.add("one");
		list.add("one");
		list.add("two");
		list.add(new String ("three")); //객체 방식으로 데이터 넣기
		System.out.println(list.size() + " / " + list); //4
		
		Set<String> set = new HashSet<>(); //주머니: index X, 중복적용 X
		set.add("one");
		set.add("one");
		set.add("two");
		set.add(new String ("three")); //객체 방식으로 데이터 넣기
		System.out.println(set.size() + " / " + set); //3
		
		//add, get X, size, remove, contains
		
//		Set<int> set2 = new HashSet<>(); Syntax error, insert "Dimensions" to complete ReferenceType
		Set<Integer> set2 = new HashSet<>(); //int 숫자자료형, 객체만저장 -> int의 객체형식인 Integer로 입력
		//int → integer, float → Float, double → Double... ▷ Wrapper Class
		set2.add(1); // Integer e = 1;
		set2.add(new Integer(2)); // Integer e = new Integer(2);
		set2.add(3); //Integer e = 1;
		
		int 	a = 1; //값
		Integer e = 1; //객체
		System.out.println(a + " / " + e);
	}
}
