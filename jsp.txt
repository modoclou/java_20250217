■1. WEB
1. WEB
- TCP/IP 기반으로 연결되어 있는 컴퓨터 네트워크
- 클라이언트 ↔ 서버 기반
- 1) web 프로그래밍 (Http 통신)	단방향통신
      (Client 요청 시 Server가 응답 후 종료)
- 2) Socket 프로그래밍 (채팅)	양방향통신
      (특정 port를 통해서 실시간으로 정보를 주고받음 - 계속 연결)

2.WS/WAS
- WS (Web Server) : 정적 콘텐츠(html,css,js)를 웹 브라우저에 제공
   예) Apache
- WAS (Web Application Server) : 동적 콘텐츠
   브라우저와 dbms 사이에서 동작하는 미들웨어
   예) Apache + tomcat

3. Tomcat
>> Http request(요청) > Catalina(실제 요청 처리, 해결사) > Context(네트워크 상의 콘텐츠)
     > Servlet(java 파일 처리) > response

3-1) http request
3-2) Coyte가 해결사 찾기: http 요청을 처리할 웹 어플리케이션(context)를
		         Web.xml 파일의 내용을 참고해서 누가 해결할지 요청을 전달
3-2) Catalina(Servlet): 해결사
3-3) Jasper(Jsp Engine): java+html 페이지 요청 처리하고 응답해준다(response)
3-4) 

C:\Users\tj-bu-703-12\Documents\java_20250217_1\tomcat9.0\apache-tomcat-9.0.95\work\Catalina\localhost\jsp_basic_2\org\apache\jsp

■2. JSP
1. JSP 기본요소
- html + java

1) 스크립트 립: <% %> java 코드가 들어가는 곳
2) 지시자: <%@ %> 
3) 주석: <%-- --%>
4) 표현식: <%= %?> 출력구문 출력
5) 선언: <%! %>

2. FORM
: 서버로 정보 전달하는 역할
   action="요청처리"
   method="요청처리방식" (get, host)
   name="쿼리스트링 데이터 보관명"

3. 쿼리스트링
https://www.google.com/search?q=apple&name=sally
- url 뒤에 입력데이터를 함께 제공하는 데이터 전달방법
- get 방식으로 데이터를 넘겨준다.

- 클라이언트[#] ↔ 서버
사용자가 Apple이라고 적으면 서버에서 data를 받을 때

4. request.getParameter("name값")
- 클라이언트 ↔ 서버[#]
- request.getParameter("q")  //apple


■3. 내장객체
1. request (요청)
데이터를 받는다
  - request.getParameter("name"); 값 하나
  - request.getParameterValues("name"); 값 여러개 - checkbox

2. response (응답)
  - response.sendRedirect("처리경로");	
    * response/request가 유지되지 않음
    * 같은 처리 alert 출력안됨
  ※ location.href / meta http-equiv='refresh'	content='초; url=경로'

  - request.getRequestDispatcher("경로").forward(request.response);
    * 요청과 응답 위임
    * response/request가 유지됨.

3. scope 범위
   [ application(애플리케이션) > session(브라우저) > request(요청) > pageContext(페이지) ]
4. session
  - http 프로토콜 (데이터요청 - 응답을 받게 되면 바로 종료)
  - 브라우저 종료시까지 유지. 서버측에 저장되는 정보
  - 보안

5. cookie
  - 클라이언트 측에 저장되는 정보
  - 보안상에 취약

6. error
  - 4xx (클라이언트 오류) 5xx(서버측 오류)
  - 404 not found, 500 자바코드상에 오류
  - web.xml 에러설정

7. out
  - 출력


■4. mv1 cs mv2
1. MVC
  - 서로 영향없이 쉽게 고칠 수 있는 애플리케이션

  - M: 애플리케이션의 정보 (db정보, dto, dao, 비지닉스 logic 포함) Model
  - V: vier 사용자가 사용하는 화면
  - C: controller model과 view 사이의 상호작용 관리

2. mvc1 vs mvc2
  - mvc1은 controller 역할을 jsp가 담당
  - mvc2는 controller 역할을 sevlet이 담당

■5. dbcp
1. dbcp
  - 분산 응용 프로그램

2. 실습

1) 다운로드
	https://commons.apache.org/ - [commons] - dbcp, pool, collections
	https://commons.apache.org/downloads/index.html
2) [WEB INF] - [lib] JAR
3) DBCP - JAVA 파일 만들기
	https://tomcat.apache.org/

■server.xml
<Context>
  <Resource name="jdbc/mbasic" auth="Container" type="javax.sql.DataSource"
               maxTotal="100" maxIdle="30" maxWaitMillis="10000"
               username="root" password="1234" driverClassName="com.mysql.cj.jdbc.Driver"
               url="jdbc:mysql://localhost:3306/mbasic"/>
</Context>

■web.xml
  <resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/mbasic</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>

■DBCP연동
Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
Connection conn = ds.getConnection();